#!/usr/bin/env node

/**
 * gitj
 */

/**
 * Modules
 */

var child_process = require('child_process')
  , spawn = child_process.spawn
  , exec = child_process.execFile
  , path = require('path')
  , fs = require('fs');

/**
 * Log Format
 */

var FORMAT = 'format:commit %H%nAuthor: %an <%ae>%nAuthorDate: %ad%nCommit: %cn <%ce>%nCommitDate: %cd%nRefs:%d%n%n%B%n';

/**
 * Program
 */

var Program = require('blessed')
  , p;

function parseLogs(text) {
  return text
    .replace(/[ \t]+$/gm, '')
    .split(/(?=^commit [a-f0-9]{40})/m)
    .map(function(log) {
      log = log.trim();
      if (!log) return null;

      log = {
        id: /^commit ([a-f0-9]{40})\n/.exec(log)[1],
        author: /\nAuthor:[ \t]+([^\n]+)/.exec(log)[1].trim(),
        authorDate: /\nAuthorDate:[ \t]+([^\n]+)/.exec(log)[1].trim(),
        committer: /\nCommit:[ \t]+([^\n]+)/.exec(log)[1].trim(),
        commitDate: /\nCommitDate:[ \t]+([^\n]+)/.exec(log)[1].trim(),
        refs: /\nRefs:[ \t]*([^\n]*)/.exec(log)[1].trim(),
        message: log.split('\n\n').slice(1).join('\n\n').trim()
      };

      log.short = log.id.slice(0, 7);
      log.committerName = log.committer.split(' <')[0];
      log.committerEmail = (log.committer.split(' <')[1] || '').slice(0, -1);
      log.authorName = log.author.split(' <')[0];
      log.authorEmail = (log.author.split(' <')[1] || '').slice(0, -1);

      if (log.refs === '()') log.refs = '';

      return log;
    })
    .filter(Boolean);
}

function getLogs(repo, branch, callback) {
  if (!callback) {
    callback = branch;
    branch = null;
  }

  var args = ['log', '--format=' + FORMAT];

  if (branch) args.push(branch);

  return exec('git', args, {
    cwd: repo,
    stdio: ['ignore', 'pipe', 'ignore'],
    env: process.env,
    maxBuffer: Infinity
  }, function(err, stdout, stderr) {
    if (err) return callback(err);
    if (stderr) return callback(new Error(stderr));
    return callback(null, parseLogs(stdout));
  });
}

function getDirty(repo, callback) {
  var ps = spawn('git', ['diff', '--no-ext-diff', '--quiet', '--exit-code', 'HEAD'], {
    cwd: repo,
    stdio: ['ignore', 'ignore', 'ignore'],
    env: process.env
  });

  ps.on('exit', function(code) {
    return callback(null, code !== 0);
  });

  return ps;
}

function getStash(repo, callback) {
  var ps = spawn('git', ['rev-parse', '--verify', 'refs/stash'], {
    cwd: repo,
    stdio: ['ignore', 'ignore', 'ignore'],
    env: process.env
  });

  ps.on('exit', function(code) {
    return callback(null, code === 0);
  });

  return ps;
}

function parseBranches(data) {
  var current;
  data = data.trim().split(/\n+/).map(function(name) {
    name = name.trim();
    var sel = name[0] === '*';
    if (sel) {
      name = name.replace(/^\*\s*/, '');
      current = name;
    }
    return name;
  });
  return {
    current: current,
    names: data
  };
}

function getBranches(repo, callback) {
  return exec('git', ['branch'], {
    cwd: repo,
    stdio: ['ignore', 'pipe', 'ignore'],
    env: process.env
  }, function(err, stdout, stderr) {
    if (err) return callback(err);
    if (stderr) return callback(new Error(stderr));
    return callback(null, parseBranches(stdout));
  });
}

function showCommit(repo, id, file, callback) {
  if (!callback) {
    callback = file;
    file = null;
  }

  if (file) id += ':' + file;

  var action = id === 'HEAD'
    ? 'diff'
    : 'show';

  var cmd = 'git '
    + action
    + ' '
    + quote(id)
    + (p.whitespace ? ' -w' : '')
    + (p.context ? ' --unified="' + p.context + '"' : '')
    + (p.patience ? ' --patience' : '')
    + ' --color=always | less -R';

  var ps = spawn('sh', ['-c', cmd], {
    cwd: repo,
    customFds: [0, 1, 2],
    env: process.env
  });

  ps.on('exit', function(code) {
    if (code !== 0) {
      callback(new Error('Exit code: ' + code))
      callback = function() {};
    }
  });

  ps.on('close', function() {
    return callback();
  });

  return ps;
}

function editCommit(repo, id, callback) {
  var ps = spawn('git', ['rebase', '-i', id], {
    cwd: repo,
    customFds: [0, 1, 2],
    env: process.env
  });

  ps.on('exit', function(code) {
    if (code !== 0) {
      callback(new Error('Exit code: ' + code))
      callback = function() {};
    }
  });

  ps.on('close', function() {
    return callback();
  });

  return ps;
}

function quote(text) {
  text = text
    .replace(/([\\"$])/g, '\\$1')
    .replace(/\r/g, '')
    .replace(/\n/g, '\\n');

  return '"' +  text + '"';
}

function clean(text) {
  return /^([^\r\n]*)/.exec(text)[1].trim().replace(/\x1b+/g, ' ');
}

function render(opt, callback) {
  var logs = opt.logs
    , branches = opt.branches;

  if (opt.dirty) {
    logs.unshift({
      id: 'HEAD',
      short: 'HEAD   ',
      message: 'Local uncommitted changes'
    });
  }

  p = new Program;

  if (!p.output.isTTY) {
    console.log(logs);
    return process.exit(0);
  }

  p.offset = 0;
  p._index = 1;
  p.statusbar = opt.status ? 1 : 0;

  p.alternateBuffer();
  p.enableMouse();

  p.on('mouse', function(key) {
    if (key.action === 'wheelup') {
      return onkey(null, { name: 'u' });
    }
    if (key.action === 'wheeldown') {
      return onkey(null, { name: 'd' });
    }
    if (key.action === 'mousedown' && key.button === 'left') {
      if (p.statusbar && key.y === p.rows) {
        if (p._search) return onkey('\x1b', { name: 'escape' });
        return onkey('/', { name: 'slash' });
      }
      return p._index === key.y
        ? onkey(null, { name: 'enter' })
        : scroll(key.y - p._index);
    }
  });

  function onkey(ch, key) {
    if (p._needsClear) {
      p._needsClear = false;
      p.move(1, p.rows);
      p.eraseInLine('right');
      renderList();
    }

    if (key.name === 'mouse') {
      return;
    }

    if (p._search) {
      if (key.name === 'enter') {
        p.eraseInLine('left');
        var search = p._search;
        delete p._search;
        p._lastSearch = search;

        var matcher = /^[0-9a-f]{7,}$/.test(search.data)
          ? function(log) { return log.id.indexOf(search.data) === 0; }
          : function(log) {
            return ~log.message.toLowerCase().indexOf(search.data.toLowerCase());
          }

        search.logs = !search.reverse
          ? logs.slice(p.offset + p._index - 1 + 1)
          : logs.slice(0, p.offset + p._index - 1)

        if (search.reverse) {
          var i = search.logs.length;
          while (i--) {
            var log = search.logs[i];
            if (matcher(log)) {
              p.offset = i;
              p._index = 1;
              break;
            }
          }
        } else {
          for (var i = 0; i < search.logs.length; i++) {
            var log = search.logs[i];
            if (matcher(log)) {
              p.offset += p._index + i;
              p._index = 1;
              break;
            }
          }
        }
        p.hideCursor();
        return renderList();
      }
      if (key.name === 'backspace') {
        if (!p._search.data.length) {
          p.eraseInLine('left');
          return onkey(null, {name:'escape'});
        }
        p._search.data = p._search.data.slice(0, -1);
        p.back();
        p.deleteChars();
        return;
      }
      if (key.name === 'escape') {
        p._search.canceled = true;
        p._lastSearch = p._search;
        delete p._search;
        p.hideCursor();
        p.eraseInLine('left');
        return renderList();
      }
      if (ch) {
        p._search.data += ch;
        return p.write(ch);
      }
      return;
    }

    if (p._enter) {
      if (key.name === 'enter') {
        p.hideCursor();
        p.eraseInLine('left');

        var enter = p._enter;
        p._lastEnter = enter;
        delete p._enter;

        var parts = enter.data.split(' ')
          , cmd = parts[0]
          , val = parts.slice(1).join(' ');

        if (cmd === 'w' || cmd === 'space' || cmd === 'whitespace') {
          p.whitespace = !p.whitespace;
          return p.whitespace
            ? echo('Ignoring whitespace.')
            : echo('Not ignoring whitespace.');
        }

        if (cmd === 'c' || cmd === 'context') {
          p.context = val;
          return echo(val + ' lines of context.');
        }

        if (cmd === 'p' || cmd === 'patience') {
          p.patience = !p.patience;
          return p.patience
            ? echo('Patience enabled.')
            : echo('Patience disabled.');
        }

        if (cmd === 'echo') {
          return echo(val);
        }

        if (cmd === 'status') {
          p.statusbar = p.statusbar ? 0 : 1;
          return updateStatusbar();
        }

        if (cmd === 'branch') {
          return echo(branches.names.join(', '));
        }

        if (cmd === 'e') {
          return onkey('E', { name: 'e', shift: true });
        }

        if (cmd === 'q') {
          return exit();
        }

        p.clear();
        p.move(1, 1);
        p.showCursor();
        p.disableMouse();
        p.input.pause();

        if (cmd === 'cd') {
          opt.repo = path.resolve(opt.repo, val);
          return getLogs(opt.repo, function(err, log) {
            if (err) return;
            logs = opt.logs = log;
            p.input.resume();
            p.enableMouse();
            p.clear();
            p.hideCursor();
            renderList();
          });
        }

        if (cmd === 'show' || cmd === 'file') {
          return showCommit(opt.repo, enter.id, val, function() {
            p.input.resume();
            p.enableMouse();
            p.clear();
            p.hideCursor();
            renderList();
          });
        } else if (cmd === 'checkout' || cmd === 'view') {
          return getLogs(opt.repo, val, function(err, log) {
            if (err) return;

            logs = opt.logs = log;
            branches.current = val;
            p._index = 1;
            p.offset = 0;

            p.input.resume();
            p.enableMouse();
            p.clear();
            p.hideCursor();
            renderList();
          });
        } else {
          p.input.resume();
          p.enableMouse();
          p.clear();
          p.hideCursor();
          renderList();
          return;
        }
      }
      if (key.name === 'backspace') {
        if (!p._enter.data.length) {
          p.eraseInLine('left');
          return onkey(null, {name:'escape'});
        }
        p._enter.data = p._enter.data.slice(0, -1);
        p.back();
        p.deleteChars();
        return;
      }
      if (key.name === 'escape') {
        p._enter.canceled = true;
        p._lastEnter = p._enter;
        delete p._enter;
        p.hideCursor();
        p.eraseInLine('left');
        return renderList();
      }
      if (ch) {
        p._enter.data += ch;
        p.write(ch);
        return;
      }
      return;
    }

    if (key.name === 'down' || key.name === 'j') {
      return scroll(1);
    }

    if (key.name === 'up' || key.name === 'k') {
      return scroll(-1);
    }

    if (key.name === 'd') {
      return scroll((p.rows - p.statusbar) / 2 | 0);
    }

    if (key.name === 'u') {
      return scroll(-((p.rows - p.statusbar) / 2 | 0));
    }

    if (key.name === 'f') {
      return scroll(p.rows - p.statusbar);
    }

    if (key.name === 'b') {
      return scroll(-(p.rows - p.statusbar));
    }

    if (ch === 'H') {
      return scroll(1 - p._index);
    }

    if (ch === 'M') {
      return scroll((Math.min(p.rows - p.statusbar, logs.length) / 2 | 0) - p._index);
    }

    if (ch === 'L') {
      return scroll(Math.min(p.rows - p.statusbar, logs.length) - p._index);
    }

    if (ch === 'g') {
      return scroll(-Math.max(logs.length, p.rows));
    }

    if (ch === 'G') {
      return scroll(Math.max(logs.length, p.rows));
    }

    if (ch === '/' || ch === '?') {
      p.move(1, p.rows);
      p.eraseInLine('right');
      p.showCursor();
      p.write('Search: ');
      p._search = {
        data: '',
        reverse: ch === '?'
      };
      return;
    }

    if (ch === 'n' && p._lastSearch) {
      p._search = p._lastSearch;
      p._search.reverse = false;
      onkey(null, {name:'enter'});
      return;
    }

    if (ch === 'N' && p._lastSearch) {
      p._search = p._lastSearch;
      p._search.reverse = true;
      onkey(null, {name:'enter'});
      return;
    }

    if ((key.ctrl && key.name === 'c') || key.name === 'q') {
      return exit();
    }

    if (key.name === 'right' || key.name === 'l' || key.name === 'enter') {
      p.clear();
      p.move(1, 1);
      p.showCursor();
      p.disableMouse();
      p.input.pause();
      return showCommit(opt.repo, logs[p.offset + p._index - 1].id, function() {
        p.input.resume();
        p.enableMouse();
        p.clear();
        p.hideCursor();
        renderList();
      });
    }

    if (ch === 'E') {
      var parent = logs[p.offset + (p._index - 1) + 1];
      if (!parent) return;
      p.clear();
      p.move(1, 1);
      p.showCursor();
      p.disableMouse();
      p.input.pause();
      return editCommit(opt.repo, parent.id, function() {
        p.input.resume();
        p.enableMouse();
        p.clear();
        p.hideCursor();
        renderList();
      });
    }

    if (key.name === 's' || ch === ':') {
      p.move(1, p.rows);
      p.eraseInLine('right');
      p.showCursor();
      p.write(key.name === 's' ? 'Show File: ' : ':');
      p._enter = {
        id: logs[p.offset + p._index - 1].id,
        data: key.name === 's' ? 'show ' : ''
      };
      return;
    }
  }

  function echo(text) {
    p.move(1, p.rows);
    p.eraseInLine('right');
    p.echo(text);
    p._needsClear = true;
  }

  function exit() {
    p.disableMouse();
    p.clear();
    p.showCursor();
    p.normalBuffer();
    return process.exit(0);
  }

  function scroll(i) {
    if (!i) return;
    if (p._search || p._enter) {
      onkey('\x1b', { name: 'escape' });
    }
    if (p._index + i > p.rows - p.statusbar) {
      // NOTE: Start using insertLines so
      // scrollRegion can be used.
      p._index += i;
      var r = p._index - (p.rows - p.statusbar);
      p._index = p.rows - p.statusbar;
      p.offset += r;
      if (!logs[p.offset + p._index - 1]) {
        p.offset = Math.max(p.rows, logs.length) - p.rows;
        if (p.rows <= logs.length) {
          p.offset += p.statusbar;
        }
        p._index = Math.min(p.rows - p.statusbar, logs.length);
      }
      return renderList();
    } else if (p._index + i < 1) {
      p._index += i;
      p.offset += p._index - 1;
      if (p.offset < 0) p.offset = 0;
      p._index = 1;
      return renderList();
    } else {
      if (p.offset + (p._index - 1) + i > (logs.length - 1)) {
        i = (logs.length - 1) - (p.offset + (p._index - 1));
      }
      p.move(1, p._index);
      p.write(' ');
      p.write(logs[p.offset + p._index - 1].short, 'red fg');
      p._index += i;
      p.move(1, p._index);
      p.write(' ');
      p.write(logs[p.offset + p._index - 1].short, 'blue bg');
      p.move(1, p._index);
      updateStatusbar();
      return;
    }
  }

  function updateStatusbar() {
    if (!p.statusbar) return;

    var selected = logs[p.offset + p._index - 1]
      , left
      , right;

    left = selected.id
      + (selected.authorDate ? ' - ' + selected.authorDate : '')

    right = '['
      + branches.current
      + ']'
      + (opt.stash ? ' $' : '')
      + (opt.dirty ? ' *' : '');

    right = right.substring(0, p.cols);
    left = left.substring(0, p.cols - right.length);

    p.move(1, p.rows);
    p.bg('black');

    p.write(left);

    // NOTE: insertChars doesn't work on screen.
    // p.insertChars(p.cols);
    p.write(Array(p.cols - left.length - right.length + 1).join(' '));

    p.write(right, 'cyan fg');

    p.bg('!black');
  }

  function renderList(from) {
    from = from || 1;
    p.move(1, from);

    var visible = logs.slice(p.offset + (from - 1), p.offset + p.rows - p.statusbar);

    visible.forEach(function(log, i) {
      var date = new Date(log.authorDate)
        , msg = clean(log.message || '')
        , email = log.authorEmail || ''
        , refs = log.refs || ''
        , j = i + (from - 1);

      date = date.toString() !== 'Invalid Date'
        ? date.toISOString().split('T')[0]
        : '';

      msg = msg.slice(0, p.cols - 17 - date.length - email.length - refs.length - 2);

      p.write(' ');

      // commit id
      p.write(log.short, j === p._index - 1 ? 'blue bg' : 'red fg');

      // separator
      p.write(' │ ');

      // refs
      if (refs) {
        p.write(refs + ' ', 'yellow fg');
      }

      // message
      p.write(msg);

      // date
      if (date) {
        p.write(' (' + date + ')', 'green fg');
      }

      // email
      if (email) {
        p.write(' <' + email + '>', 'blue fg');
      }

      p.eraseInLine('right');

      if (i !== visible.length - 1) {
        p.feed();
      }
    });

    // This is needed for searching and getting
    // an item at index 1 even when there aren't
    // enough items to fill the entire screen.
    var i = from + visible.length - 1;
    while (i++ < p.rows - p.statusbar) {
      p.move(1, i);
      p.eraseInLine('right');
    }

    updateStatusbar();

    p.move(1, p._index);
  }

  p.on('keypress', onkey);

  p.on('resize', function() {
    if (p._index > p.rows - p.statusbar) {
      p._index = p.rows - p.statusbar;
    }
    renderList();
  });

  p.clear();
  p.hideCursor();
  renderList();
}

function parseArg(argv) {
  var argv = argv.slice(2)
    , options = {}
    , files = [];

  function getarg() {
    var arg = argv.shift();

    if (arg.indexOf('--') === 0) {
      // e.g. --opt
      arg = arg.split('=');
      if (arg.length > 1) {
        // e.g. --opt=val
        argv.unshift(arg.slice(1).join('='));
      }
      arg = arg[0];
    } else if (arg[0] === '-') {
      if (arg.length > 2) {
        // e.g. -abc
        argv = arg.substring(1).split('').map(function(ch) {
          return '-' + ch;
        }).concat(argv);
        arg = argv.shift();
      } else {
        // e.g. -a
      }
    } else {
      // e.g. foo
    }

    return arg;
  }

  while (argv.length) {
    arg = getarg();
    switch (arg) {
      case '-r':
      case '--repo':
        options.repo = argv.shift();
        break;
      case '-s':
      case '--status':
        options.status = true;
        break;
      case '-n':
      case '--no-status':
        options.status = false;
        break;
      case '-h':
      case '--help':
        return help();
      default:
        if (!options.repo
            && fs.existsSync(arg)
            && fs.statSync(arg).isDirectory()) {
          options.repo = arg;
        } else {
          files.push(arg);
        }
        break;
    }
  }

  options.repo = path.resolve(process.cwd(), options.repo || '.');

  if (options.status == null) {
    options.status = true;
  }

  return options;
}

var opt = parseArg(process.argv);

function help() {
  console.log('todo');
  return process.exit(0);
}

function poll(options, callback) {
  options = options || {};
  options.repo = options.repo || opt.repo;
  callback = callback || function() {};

  function getLog(callback) {
    return options.logs
      ? getLogs(options.repo, callback)
      : callback();
  }

  return getLog(function(err, logs) {
    if (err) return callback(err);
    return getBranches(options.repo, function(err, branches) {
      if (err) return callback(err);
      return getDirty(options.repo, function(err, dirty) {
        if (err) return callback(err);
        return getStash(options.repo, function(err, stash) {
          if (err) return callback(err);

          if (options.update !== false) {
            opt.logs = logs || opt.logs;
            opt.branches = branches;
            opt.dirty = dirty;
            opt.stash = stash;
          }

          return callback(null, {
            logs: logs || opt.logs,
            branches: branches,
            dirty: dirty,
            stash: stash
          });
        });
      });
    });
  });
}

function beginPoll() {
  var i = 0;
  (function self() {
    var opt = {};
    if (++i === 6) {
      opt.logs = true;
      i = 0;
    }
    return poll(function() {
      return setTimeout(self, 10 * 1000);
    });
  })();
}

function main(argv, callback) {
  beginPoll();
  return poll({ logs: true }, function(err) {
    if (err) return callback(err);
    return render(opt, function(err) {
      if (err) return callback(err);
      return callback();
    });
  });
}

if (!module.parent) {
  main(process.argv.slice(), function(err) {
    if (err) throw err;
    return process.exit(0);
  });
} else {
  module.exports = main;
}
